#include <sys/tarfs.h>
#include <sys/kprintf.h>
#include <sys/defs.h>
#include <sys/string.h>
#include <sys/vfs.h>
#include <sys/vmmu.h>
#include <sys/elf64.h>
//#include 
/*#define O_DIRECTORY = 0x10000 
#define O_WRONLY = 1
#define  O_RDWR = 2
*/

tarfs_entry tarfs_fs[100]; 
char buf[10];

//open, read, close, opendir, readdir, closedir


int get_per_ind(char* dir)
{
    char name[100];
    int len = strlen(dir);
    strcpy(&name[0], dir);
    len = len-2;
    while(name[len] != '/')
    {
        len--;
        if(len == 0)
            return 999;
    } 
    name[++len] = '\0';
    int i = 0;
    while(strcmp(&name[0], &(tarfs_fs[i].name[0])) !=  0)
        i++;
    return i;
}

int get_per_ind_file(char* dir)
{
    char name[100];
    int len = strlen(dir);
    strcpy(&name[0], dir);
    len = len-1;
    while(name[len] != '/')
    {
        len--;
        if(len == 0)
            return 999;
    }
    name[++len] = '\0';
    int i = 0;
    while(strcmp(&name[0], &(tarfs_fs[i].name[0])) !=  0)
        i++;
    return i;
}


uint64_t octal_to_int(char *optr, int length) {
    uint64_t val = 0;
    if(optr == NULL)
        return 0;
    while(length-- > 0 && *optr >= '0' && *optr <= '7') {
        val <<= 3;
        val += *optr++ - '0';
    }
    return val;
}



unsigned int getSize(const char *in)
{
 
    unsigned int size = 0;
    unsigned int j;
    unsigned int count = 1;
 
    for (j = 11; j > 0; j--, count *= 8)
        size += ((in[j - 1] - '0') * count);
 
    return size;
 
}
uint64_t getElfHeader(char * fileName)
{
	uint64_t address= (uint64_t)&_binary_tarfs_start;
        unsigned int i;
        for(i =0 ; address <(uint64_t)&_binary_tarfs_end ;i++){
                struct posix_header_ustar *header = (struct posix_header_ustar*)address;
                unsigned int size = getSize(header->size);
		if(strcmp(header->name,fileName)==0)
		{
			return (uint64_t) (header+1);
		}
                address += ((size/512) +1) * 512;
                if(size %512)
                        address+=512;
        }
return (uint64_t)NULL;
}
void tarfs_init()
{
	uint64_t address= (uint64_t)&_binary_tarfs_start;
        unsigned int i;
        for(i =0 ; address <(uint64_t)&_binary_tarfs_end ;i++){
                struct posix_header_ustar *header = (struct posix_header_ustar*)address;
                unsigned int size = getSize(header->size);
		strcpy(tarfs_fs[i].name,header->name);
		tarfs_fs[i].size = size;            
		tarfs_fs[i].typeflag = atoi(header->typeflag);
        	tarfs_fs[i].addr_hdr = address;
		/*if(tarfs_ei.typeflag == FILE_TYPE)
            		tarfs_e.par_ind = get_per_ind_file(&(tarfs_e.name[0]));
        	else if(tarfs_e.typeflag == DIRECTORY)
        	{
            		tarfs_e.par_ind = get_per_ind(&(tarfs_e.name[0]));
            		// curr_dir = i;
        	}*/    
                address += ((size/512) +1) * 512;
                if(size %512)
                        address+=512;
        }
}
uint64_t tarfs_open_file(char * filename)
{
	int i=0;
	while(1)
	{
		if(tarfs_fs[i].name==0) break;
		if(strcmp(&(tarfs_fs[i].name[0]), filename) == 0 && tarfs_fs[i].typeflag == FILE_TYPE)
		{
			return tarfs_fs[i].addr_hdr;
		}
	}
	kprintf("\n No such file ");
        kprintf("%s", filename);
        return 0;
}
int tarfs_read_file(uint64_t fd, int size, char *buf)
{
	struct posix_header_ustar * header = (struct posix_header_ustar*)fd;
	unsigned int file_size = getSize(header->size);
	if(file_size<size)
	{
		size = file_size;
	}
	int len = size;
	char *temp = (char *) buf;
	char* file_addr = (char *)(fd + 512);
    	int i = 0;
    	while(size-- > 0)
    	{
        	temp[i++] = *file_addr++;
    	}    
    	temp[i]='\0';
    	return len;
}
/*
struct file * tarfs_open(struct posix_header_ustar *tarfheader,int flags,uint64_t mode, int *err)
{
    struct file* fp = kmalloc(sizeof(struct file));
    if(!fp) 
    {
        return NULL;
    }
    fp->private_data = tarfheader;
    fp->f_size = octal_to_int(tarfheader->size, sizeof(tarfheader->size));
    if(tarfheader->typeflag[1] == TARFS_DIRECTORY)
        fp->f_pos = (uint64_t)tarfs_next(tarfheader);
    else
        fp->f_pos = 0;
    fp->f_error = 0;
    fp->f_flags = flags;
    fp->f_count = 1;
    //kprintf("Inside tarfs open,%x",fp);
    tarfs_read(fp,buf,sizeof(buf) - 1,&fp->f_pos);
    return fp;
}
uint64_t open_dir(char * dir)
{
        if(strlength(header->name) == 0)
            return 0;
        if(strcmp(header->name,dir) == 0 && header->typeflag[0] == 5)
            return header;

    return 0;
}*/
/*
static struct posix_header_ustar *tarfs_next(struct posix_header_ustar *address) 
{

        struct posix_header_ustar *header = (struct posix_header_ustar*)address;
        unsigned int size = getSize(header->size);
        address += ((size/512) +1) * 512;
        if(size %512)
            {
             address+=512;
            }
        header = address;

        return header;
   

        if(!cur_hdr || cur_hdr->name[0] == '\0')
        {
        
             return NULL;
        
        }
        else
        { 
        
        uint64_t size = octal_to_int(cur_hdr->size, sizeof(cur_hdr->size));
        cur_hdr  += 1 + size/512 + (size % 512 != 0);
        if(cur_hdr->name[0] == '\0')
            return NULL;
        else
            return cur_hdr;
        }







}
struct file * tarfs_open(struct posix_header_ustar *tarfheader,int flags,uint64_t mode, int *err)
{
    struct file* fp = kmalloc(sizeof(struct file));
    if(!fp) 
    {
        return NULL;
    }
    fp->private_data = tarfheader;
    fp->f_size = octal_to_int(tarfheader->size, sizeof(tarfheader->size));
    if(tarfheader->typeflag[1] == TARFS_DIRECTORY)
        fp->f_pos = (uint64_t)tarfs_next(tarfheader);
    else
        fp->f_pos = 0;
    fp->f_error = 0;
    fp->f_flags = flags;
    fp->f_count = 1;
    //kprintf("Inside tarfs open,%x",fp);
    tarfs_read(fp,buf,sizeof(buf) - 1,&fp->f_pos);
    return fp;
}

uint64_t  tarfs_read(struct file *fp, char *buf, size_t count, off_t *offset)
{

struct posix_header_ustar *tarfheader = (struct posix_header_ustar *)fp->private_data;
char *file_data_start;
size_t bytes_left, num_read;

if(count == 0 ||  *offset == fp->f_size)
{
  kprintf("size %d",fp->f_size);
  return 0;
}

bytes_left = fp->f_size - *offset;

if(bytes_left<count)
{
num_read = bytes_left;
}
else
{
num_read = count;
}

file_data_start = (char *)(tarfheader + 1);
memcpy(buf, file_data_start + *offset, num_read);
*offset += num_read;
kprintf("Number of bytes read,%d %s", num_read,buf); 
return num_read;

}


uint64_t open_dir(char * dir)
{
        if(strlength(header->name) == 0)
            return 0;
        if(strcmp(header->name,dir) == 0 && header->typeflag[0] == 5)
            return header;

    return 0;
}
*/

uint64_t read_dir(uint64_t addr)
{
    tarfs_entry tarfs_e;
    char *dir;
    int i = 0, parent = -1, len = 0;
    if(addr == 999)
        parent = 999; 
    while(1)
    {
        tarfs_e = tarfs_fs[i];
       // if(strlength(tarfs_e.name) == 0)
         //   break;

        if( tarfs_e.addr_hdr == addr)
        {  
            parent = i;
            i++;
            dir = tarfs_e.name;
            len = strlen(dir);
            continue; 
        }
        if((strcmp(&(tarfs_e.name[0]), dir) &&( tarfs_e.par_ind == parent)))
              {  
                  kprintf("%s", tarfs_e.name + len);
              }
        i++;
    }
    return 0;
}
